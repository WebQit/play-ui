{"version":3,"sources":["webpack://@webqit/playui-file-input/./src/index.js","webpack://@webqit/playui-file-input/./src/dfn.js","webpack://@webqit/playui-file-input/./src/browser-entry.js"],"names":["window","file","HTMLInputElement","super","this","_dataTransfer","DataTransfer","addEventListener","e","data","dropArea","_addFiles","files","closest","forEach","eventName","removeEventListener","_handlerDrag","type","state","dragging","preventDefault","dataTransfer","isDirectSelection","_prevFilesDirectSelection","i","length","items","remove","multiple","add","clear","thumbnails","Array","from","map","_createThumbnail","desc","name","size","revokeURL","el","URL","revokeObjectURL","src","test","img","document","createElement","onload","createObjectURL","thumbnail","mime","media","onloadstart","play","muted","dfn","customElements","define","extends"],"mappings":"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","file":"main.js","sourcesContent":["\n/**\n * @imports\n */\nimport dfn from './dfn.js';\n\n/**\n * @definitions\n */\nexport default function(window) {\n\n\tconst { file } = dfn(window);\n\t\n\twindow.customElements.define('playui-file-input', file, { extends: 'input' });\n};\n","\n/**\n * ---------------------------\n * Class definitions\n * ---------------------------\n */\nexport default function(window) {\n\n    /**\n     * @File\n    */\n    const file = class extends window.HTMLInputElement {\n        \n        constructor() {\n            super();\n            // A new DataTransfer object\n            this._dataTransfer = new DataTransfer;\n            // On-direct choosing\n            this.addEventListener('change', e => {\n                if (this.data.dropArea) {\n                    this._addFiles(this.files, true);\n                }\n            });\n        }\n\n        connectedCallback() {\n            if (this.data.dropArea) {\n                const dropArea = this.closest(this.data.dropArea);\n                // On drag-and-drop\n                [ 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop' ].forEach(eventName => {\n                    dropArea.removeEventListener(eventName, this._handlerDrag);\n                    dropArea.addEventListener(eventName, this._handlerDrag);\n                });\n\t\t\t}\n        }\n\n        _handlerDrag(e) {\n            if (e.type === 'dragover' || e.type === 'dragenter') {\n                if (this.state) {\n                    this.state.dragging = true;\n                }\n            } else if (e.type === 'dragleave' || e.type === 'dragend' || e.type === 'drop') {\n                e.preventDefault();\n                if (this.state) {\n                    this.state.dragging = false;\n                }\n                if (e.type === 'drop') {\n                    this._addFiles(e.dataTransfer.files);\n                }\n            }\n        }\n\n        _addFiles(files, isDirectSelection = false) {\n            if (isDirectSelection) {\n                if (this._prevFilesDirectSelection) {\n                    for (let i = 0; i < this._prevFilesDirectSelection.length; i++) {\n                        this._dataTransfer.items.remove(this._prevFilesDirectSelection[i]);\n                    }\n                }\n                this._prevFilesDirectSelection = files;\n            }\n            if (this.multiple) {\n                // Add new files each time\n                for (let i = 0; i < files.length; i++) {\n                    this._dataTransfer.items.add(files[i])\n                }\n            } else {\n                // Clear existing\n                this._dataTransfer.items.clear();\n                this._dataTransfer.items.add(files[0]);\n            }\n            // Assign the files to the input element\n            this.files = this._dataTransfer.files;\n            if (this.state) {\n                this.state.thumbnails = Array.from(this.files).map(file => this._createThumbnail(file));\n            }\n        }\n\n        /**\n         * Craete a thumbnail object for a file.\n         *\n         * @param File  file\n         *\n         * @return Object\n         */\n        _createThumbnail(file) {\n            // Show thumnails\n            var desc = `${file.name}: ${file.size / 1024}KB`;\n            var revokeURL = el => window.URL.revokeObjectURL(el.src);\n            if (/^image\\//.test(file.type)) {\n                var img = document.createElement('img');\n                img.onload = e => { revokeURL(img); };\n                img.src = window.URL.createObjectURL(file);\n                return { thumbnail:img, type:'image', mime:file.type, desc, };\n            }\n            if (/^video\\//.test(file.type)) {\n                var media = document.createElement('video');\n                media.onloadstart/*canplay*/ = e => { revokeURL(media); media.play(); };\n                media.src = window.URL.createObjectURL(file);\n                media.muted = true;\n                return { thumbnail:media, type:'video', mime:file.type, desc, };\n            }\n            var type = 'file';\n            if (/^audio\\//.test(file.type)) {\n                type = 'audio';\n            } else if (/msword|ms-word|wordprocessing/.test(file.type)) {\n                type = 'word';\n            } else if (/powerpoint|presentation/.test(file.type)) {\n                type = 'powerpoint';\n            } else if (/excel|spreadsheet/.test(file.type)) {\n                type = 'excel';\n            } else if (/^text\\//.test(file.type)) {\n                type = 'text';\n            } else if (/\\/pdf/.test(file.type)) {\n                type = 'pdf';\n            } else if (/\\/zip/.test(file.type)) {\n                type = 'zip';\n            }\n            return { type, mime:file.type, desc, };\n        }\n\n    };\n\n    return {\n        file,\n    }\n};\n","\n/**\n * @imports\n */\nimport init from './index.js';\n\n/**\n * @init\n */\ninit(window);"],"sourceRoot":""}